// -- CSS构造块 --
// #region
// 1. HTML的局限性
// CSS将网页结构与样式相分离

// 2. CSS
// CSS(Cascading Style Sheets)通常称为CSS样式表或层叠样式表(级联样式表)。
// #endregion  


// -- 引入CSS样式表 --
// #region
// 1. 行内式
// <标签名 style="属性1:属性值1; 属性2:属性值2; 属性3:属性值3;"> 内容 </标签名>

// 2. 内部样式表
// 将CSS代码集中写在HTML文档的head头部标签中，并且用style标签定义。
// style标签一般位于head标签中，当然理论上他可以放在HTML文档的任何地方。
// <head>
// <style type="text/CSS">
//     选择器（选择的标签） { 
//       属性1: 属性值1;
//       属性2: 属性值2; 
//       属性3: 属性值3;
//     }
// </style>
// </head>

// 3. 外部样式表
// rel:定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件。
// href:定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径。
// <link rel="stylesheet" href="index.css">
// #endregion  


// -- CSS基础选择器 --
// #region
// 1. 标签选择器
// 快速为网页中同类型的标签统一样式
// 不能设计差异化样式。
// 标签名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; } 

// 2. 类选择器
// 可以为元素对象定义单独或相同的样式。可以选择一个或者多个标签。
// 多类名选择器：各个类名中间用空格隔开。
// .类名  {   
//     属性1:属性值1; 
//     属性2:属性值2; 
//     属性3:属性值3;     
// }
// <p class='类名'></p>

// 3. id选择器
// 元素的id值是唯一的，只能对应于文档中某一个具体的元素。
// 尽量少用ID选择器
// #id名 {属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }
// <p id="id名"></p>

// 4. 通配符选择器
// 会匹配页面所有的元素，降低页面响应速度，不建议随便使用
// * { 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }
// #endregion  


// -- CSS复合选择器 --
// #region
// 1. 后代选择器
// 用来选择元素或元素组的子孙后代
// 父级 子级{属性:属性值;属性:属性值;}
// .class h3 {color:red;font-size:16px;}

// 2. 子元素选择器
// 子元素选择器只能选择作为某元素子元素(亲儿子)的元素
// 这里的子,指的是亲儿子。不包含孙子 重孙子之类。
// .class>h3 {color:red;font-size:14px;}

// 3. 交集选择器
// 其中第一个为标签选择器，第二个为class选择器，两个选择器之间不能有空格，如h3.special。
// 不建议使用
// p.one   选择的是： 类名为 .one 的段落标签。 

// 4. 并集选择器
// 通常用于集体声明
// 任何形式的选择器都可以作为并集选择器的一部分
// 并集选择器通常用于集体声明, 逗号隔开的，所有选择器都会执行后面样式，逗号可以理解为和的意思。
// .one, 
// p , 
// #test {color: #F00;}

// 5. 链接伪类选择器
// 用于向某些选择器添加特殊的效果。写的时候，他们的顺序尽量不要颠倒,按照lvha的顺序。
// a:link  未访问的链接
// a:visited  已访问的链接
// a:hover  鼠标移动到链接上
// a:active  选定的链接
// #endregion  


// -- CSS字体样式 --
// #region
// 1. font-size
// 谷歌浏览器默认的文字大小为16px
// 不要默认大小。一般给body指定整个页面文字的大小。
// p { font-size:20px; }
// 相对长度单位 - em px
// 绝对长度单位 - in cm mm pt

// 2. font-family
// p { font-family:"微软雅黑";}
// 指定多个字体，如果浏览器不支持第一个字体就会尝试下一个直到找到合适的字体，如果都没有，以电脑默认字体为准。
// p {font-family: Arial,"Microsoft Yahei", "微软雅黑";}
// CSS Unicode字体 - 使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。
// font-family: "\5FAE\8F6F\96C5\9ED1";   表示设置字体为“微软雅黑”。

// 3. font-weight
// normal - 默认值（不加粗的）
// bold - 定义粗体（加粗的）
// 100~900 - 400 等同于 normal，而 700 等同于 bold  (数字表示粗细用的多)

// 4. font-style
// normal - 默认值，浏览器会显示标准的字体样式  font-style: normal;
// italic - 浏览器会显示斜体的字体样式。

// 5. font:综合设置字体样式
// 选择器 { font: font-style  font-weight  font-size/line-height  font-family;}
// #endregion  


// -- CSS外观属性 --
// #region
// 1. color
// 实际工作中，用16进制的写法是最多的，且我们更喜欢简写方式比如#f0代表红色
// 预定义的颜色值 - red
// 十六进制 - #FF0000
// RGB代码 - rgb(255,0,0)或rgb(100%,0%,0%)

// 2.text-align
// 用于设置文本内容的水平对齐方式，相当于html中的align对齐属性。
// 是让盒子里面的文本内容水平居中， 而不是让盒子居中对齐
// left - 左对齐（默认值）
// right - 右对齐
// center - 居中对齐

// 3. line-height
// 用于设置行间距，就是行与行之间的距离，即字符的垂直间距，一般称为行高。
// line-height - 像素px 相对值em 百分比%
// 实际工作中使用最多的是像素px
// 行高我们利用最多的一个地方是：可以让单行文本在盒子中垂直居中对齐。
// 文字的行高等于盒子的高度。
// 行高 = 上距离 + 内容高度 + 下距离
// line-height 要设置在font属性下面，否则无效
// 一般情况下，行距比字号大7--8像素左右就可以了。
// line-height: 24px;

// 可以使用display:flex;布局方式让文字水平垂直居中
// display: flex;
// align-items: center;     /* 侧轴对齐方式*/
// justify-content: center; /* 主轴对齐方式 */

// 4. text-indent
// text-indent属性用于设置首行文本的缩进
// 建议使用em作为设置单位, 1em 就是一个字的宽度。

// 5. text-decoration
// text-decoration,通常我们用于给链接修改装饰效果
// none - 定义标准的文本。取消下划线（最常用）
// underline - 定义文本下的一条线。下划线 也是我们链接自带的（常用）
// overline - 定义文本上的一条线。（不用）
// line-through	- 定义穿过文本下的一条线。（不常用）
// #endregion  


// -- 标签显示模式(display) --
// #region
// 标签显示模式转换 display
// 块转行内：display:inline;
// 行内转块：display:block;
// 块、行内元素转换为行内块：display: inline-block;

// 1. 块级元素(block-level)
// 常见的块元素有<h1>~<h6>、<p>、<div>、<ul>、<ol>、<li>等，其中<div>标签是最典型的块元素。
// 块级元素的特点
// 1 独占一行
// 2 高度，宽度，外边距以及内边距都可以控制。
// 3 宽度默认是容器(父级宽度)的100%
// 4 是一个容器及盒子，里面可以放行内或者块级元素
// 5 注意：只有文字才能组成段落，因此p标签里面不能放块级元素，特别是p不能放div。同理，还有h1~h6，dt,它们都是文字类块级标签，里面不能放其他块级元素

// 2. 行内元素(inline-level)
// 常见的行内元素有<a>、<strong>、<b>、<em>、<i>、<del>、<s>、<ins>、<u>、<span>等，其中<span>标签最典型的行内元素。
// 行内元素的特点
// 1 相邻行内元素在一行上，一行可以显示多个。
// 2 高度、宽度直接设置是无效的。
// 3 默认高度就是它本身内容的宽度。
// 4 行内元素只能容纳文本或其他行内元素。
// 特殊情况a里面可以放块级元素，但是给a转换一下块级模式最安全

// 3. 行内块元素(inline-block)
// 在行内元素中有几个特殊的标签——<img>、<input >、<td>，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。
// 行内块元素的特点
// 1 和相邻行内元素(行内块)在一行上，但是之间会有空白。一行可以显示多个
// 2 默认宽度就是它本身内容的宽度。
// 3 高度，行高，外边距以及内边距都可以控制。
// #endregion  


// -- CSS背景(background) --
// #region
// 1. 背景颜色
// background-color: 颜色值;   默认的值是 transparent  透明的

// 2. 背景图片(image)
// background-image : none | url (url) ;

// 3. 背景平铺（repeat）
// background-repeat : repeat | no-repeat | repeat-x | repeat-y 
// repeat - 背景图像在纵向和横向上平铺（默认的）
// no-repeat - 背景图像不平铺
// repeat-x	- 背景图像在横向上平铺
// repeat-y	- 背景图像在纵向平铺

// 4. 背景位置(position)
// background-position : length || length
// background-position : position || position 
// length - 百分数 | 由浮点数字和单位标识符组成的长度值
// position	- top | center | bottom | left | center | right
// position 后面是x坐标和y坐标。可以使用方位名词或者 精确单位。
// 背景简写
// background: transparent url(image.jpg) repeat-y  scroll center top ;

// 5. 背景半透明(CSS3)
// background: rgba(0, 0, 0, .3);
// 等同于background-color: rgba(0, 0, 0, .3)
// 设置opacity元素的所有后代元素会随着一起具有透明性，一般用于调整图片或者模块的整体不透明度
// opacity: .2;
// #endregion 


// -- CSS三大特性 --
// #region
// 1. CSS 层叠性
// 样式冲突，遵循的原则是就近原则。 那个样式离着结构近，就执行那个样式。
// 样式不冲突，不会层叠。

// 2. CSS 继承性
// 子标签会继承父标签的某些样式，如文本颜色和字号
// 恰当地使用继承可以简化代码，降低CSS样式的复杂性

// 3. CSS 优先级(CSS特殊性)
// 继承或者 *                   0,0,0,0
// 每个元素（标签选择器）        0,0,0,1
// 每个类，伪类	                0,0,1,0
// 每个ID	                   0,1,0,0
// 每个行内样式 style=""	    1,0,0,0
// 每个!important  最重要的    	∞ 无穷大
// #endregion 


// -- 盒子模型 --
// #region
// 网页布局的本质
// 首先利用CSS设置好盒子的大小，然后摆放盒子的位置。
// 最后把网页元素比如文字图片等等，放入盒子里面。

// 1. 盒子模型(Box Model)
// 标准 w3c 盒子模型的范围包括 margin、border、padding、content
// 宽度：Element Height = content height + padding + border
// 高度：Element  Width = content width + padding + border

// 2. 盒子边框(border)
// border-width	- 定义边框粗细，单位是px
// border-style	- 边框的样式
// border-color	- 边框颜色
// 边框的样式：
// none - 没有边框即忽略所有边框的宽度（默认值）
// solid - 边框为单实线(最为常用的)
// dashed - 边框为虚线
// dotted - 边框为点线
// 可以单独给4个边框分别指定的
// 通过表格的cellspacing="0",将单元格与单元格之间的距离设置为0,但是两个单元格之间的边框会出现重叠，从而使边框变粗,通过css属性：table{ border-collapse:collapse; }
// border : border-width || border-style || border-color 

// 3. 内边距(padding)
// 盒子会变大
// 通过给设置了宽高的盒子，减去相应的内边距的值，维持盒子原有的大小
// 如果没有给一个盒子指定宽度， 此时，如果给这个盒子指定padding， 则不会撑开盒子
// padding-left	- 左内边距
// padding-right - 右内边距
// padding-top - 上内边距
// padding-bottom - 下内边距
// 2个值padding - 上下  左右
// 3个值padding - 上  左右  下内
// 4个值padding - 上  右  下  左

// 4. 外边距（margin）
// margin-left - 左外边距
// margin-right - 右外边距
// margin-top - 上外边距
// margin-bottom - 下外边距
// margin值的简写代表意思  跟 padding 完全相同。
// 块级盒子水平居中
// 盒子必须指定宽度（width）
// 然后就给左右的外边距都设置为auto
// .header  { width: 960px; margin: 0 auto;}
// 清除元素的默认内外边距
// * {
//     padding:0;         /* 清除内边距 */
//     margin:0;          /* 清除外边距 */
//  }

// 5.外边距合并
// (1). 相邻块元素垂直外边距的合并
// 当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom
// 下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和
// 「取两个值中的较大者」这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。
// 解决方案：尽量给只给一个盒子添加margin值

// (2). 嵌套块元素垂直外边距的合并（塌陷）
// 对于两个嵌套关系的块元素，如果父元素没有上内边距及边框
// 父元素的上外边距会与子元素的上外边距发生合并
// 合并后的外边距为两者中的较大者
// 解决方案：
// 可以为父元素定义上边框。
// 可以为父元素定义上内边距
// 可以为父元素添加overflow: hidden。
// 盒子模型布局稳定性
// 优先使用width  其次使用padding  再次margin

// 6. CSS3 新增
// 圆角边框：
// border-radius:length;
// border-top-left-radius - 定义了左上角的弧度
// border-top-right-radius - 定义了右上角的弧度
// border-bottom-right-radius - 定义了右下角的弧度
// border-bottom-left-radius - 定义了左下角的弧度
// border-radius: 左上角 右上角  右下角  左下角;
// 盒子阴影(box-shadow):
// box-shadow: offset-x offset-y [blur] [spread] [color] [inset]
// offset-x - 阴影的水平偏移量。正数向右偏移，负数向左偏移。
// offset-y - 阴影的垂直偏移量。正数向下偏移，负数向上偏移。
// blur - 可选。阴影模糊距离，不能取负数。
// spread - 可选。阴影大小
// color - 可选。阴影的颜色
// inset - 可选。表示添加内阴影，默认为外阴影
// #endregion 


// -- 浮动 --
// #region
// 1. CSS布局的三种机制
// CSS 提供了3种机制来设置盒子的摆放位置，分别是普通流（标准流）、浮动和定位
// A. 普通流（标准流）
// 块级元素会独占一行，从上向下顺序排列；
// 常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table
// 行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行；
// 常用元素：span、a、i、em等

// B. 浮动
// 让盒子从普通流中浮起来,主要作用让多个块级盒子一行显示。

// C. 定位
// 将盒子定在浏览器的某一个位置——CSS 离不开定位，特别是后面的 js 特效。

// 2. 什么是浮动
// 元素的浮动是指设置了浮动属性的元素会脱离标准普通流的控制,不占位置，脱标
// 移动到指定位置。
// 作用
// 1 让多个盒子(div)水平排列成一行，使得浮动称为布局的重要手段。
// 2 可以实现盒子的左右对齐等等。
// 3 浮动最早是用来控制图片，实现文字环绕图片效果。
// 4 float属性会改变元素的display属性，任何元素都可以浮动。浮动元素会生成一个块级框，而不论它本身是何种元素。生成的块级框和我们前面的行内块极其相似。
// 选择器 { float: 属性值; }
// none - 元素不浮动（默认值）
// left	- 元素向左浮动
// right - 元素向右浮动
// #endregion 


// -- 清除浮动 --
// #region
// 父级盒子很多情况下，不方便给高度，但是子盒子浮动就不占有位置，最后父级盒子高度为0，就影响了下面的标准流盒子。
// 选择器 { clear: 属性值; }   clear 清除  
// left - 不允许左侧有浮动元素（清除左侧浮动的影响）
// right - 不允许右侧有浮动元素（清除右侧浮动的影响）
// both - 同时清除左右两侧浮动的影响
// 几乎只用clear: both

// 1).额外标签法(隔墙法)
// 通过在浮动元素末尾添加一个空的标签例如 <div style=”clear:both”></div>，或则其他标签br等亦可
// 优点：通俗易懂，书写方便
// 缺点：添加许多无意义的标签，结构化较差

// 2).父级添加overflow属性方法
// 可以给父级添加： overflow为 hidden| auto| scroll  都可以实现。
// 优点： 代码简洁
// 缺点： 内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。

// 3).使用after伪元素清除浮动
// after 方式为空元素额外标签法的升级版，好处是不用单独加标签了
// .clearfix {
//     *zoom: 1;
// }
// 优点：符合闭合浮动思想  结构语义化正确
// 缺点：由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。

// 4).使用双伪元素清除浮动
// .clearfix:before,
// .clearfix:after {
//     content: "";
//     display: table;
// }
// .clearfix:after {
//     clear: both;
// }
// .clearfix {
//    *zoom: 1;
// }
// #endregion 


// -- CSS属性书写顺序 --
// #region
// 1. 布局定位属性
// 2. 自身属性
// 3. 文本属性
// 4. 其他属性
// #endregion 


// -- 定位(position) --
// #region
// 1. 定位详解
// 标准流在最底层 (海底)
// 浮动 的盒子 在 中间层  (海面)
// 定位的盒子 在 最上层  （天空）
// 定位 = 定位模式 + 边偏移
// top - 「顶端」偏移量，定义元素相对于其父元素「上边线的距离」。
// bottom - 「底部」偏移量，定义元素相对于其父元素「下边线的距离」。
// left - 「左侧」偏移量，定义元素相对于其父元素「左边线的距离」。
// right - 「右侧」偏移量，定义元素相对于其父元素「右边线的距离」

// 2. 定位模式(position)
// 选择器 { position: 属性值; }
// static	「静态」定位
// relative	「相对」定位
// absolute	「绝对」定位
// fixed	「固定」定位

// 3. 静态定位(static)
// 静态定位是元素的默认定位方式

// 4. 相对定位(relative)
// 相对定位是元素相对于它原来在标准流中的位置来说的
// 原来在标准流的区域继续占有，后面的盒子仍然以标准流的方式对待它。

// 5. 绝对定位(absolute)
// 绝对定位是元素以带有定位的父级元素来移动位置
// 完全脱表--完全不占位置；
// 父元素没有定位，则以浏览器为准定位(Document文档)。

// 6. 固定定位(fixed)
// 完全脱标--完全不占位置；
// 只认浏览器的可视窗口--浏览器可视窗口+边偏移属性来设置元素的位置

// 绝对定位的盒子居中
// left : 50%: 让盒子的左侧移动到父级元素的水平中心位置；
// margin-left: -100px;让盒子向左移动自身宽度的一半。
// 同理垂直居中。

// 堆叠顺序（z-index）
// 如果属性值相同，则按照书写顺序，后来居上；
// #endregion 


// -- CSS高级技巧 --
// #region
// 1 display 显示（重点）
// display: none 隐藏对象
// 特点：隐藏之后，不再保留位置。
// display: block 除了转换为块级元素之外，同时还有显示元素的意思。

// 2 visibility 可见性
// visibility：visible ;  对象可视
// visibility：hidden;    对象隐藏
// 特点：隐藏之后，继续保留原有位置。

// 3 overflow 溢出
// 检索或设置当对象的内容超过其指定高度及宽度时如何管理内容。
// visible - 不剪切内容也不添加滚动条
// hidden - 不显示超过对象尺寸的内容，超出的部分隐藏掉
// scroll - 不管超出内容否，总是显示滚动条
// auto - 超出自动显示滚动条，不超出不显示滚动条
// #endregion 


// -- CSS用户界面样式 --
// #region
// 1 鼠标样式
// default - 默认
// pointer - 小手
// move - 移动
// text - 文本
// not-allowed - 禁止
// style="cursor:default"

// 2 轮廓线 outline
// outline : outline-color ||outline-style || outline-width 

// 3 防止拖拽文本域resize
// <textarea  style="resize: none;"></textarea>
// #endregion 


// -- vertical-align 垂直对齐 --
// #region
// vertical-align 垂直对齐，它只针对于「行内元素」或者「行内块元素」
// vertical-align : baseline |top |middle |bottom 

// 1 图片、表单和文字对齐
// vertical-align 控制图片和文字的垂直关系。默认的图片会和文字基线对齐。

// 2 去除图片底侧空白缝隙
// 给img vertical-align:middle | top| bottom等等。 让图片不要和基线对齐。
// 给img 添加 display：block; 转换为块级元素就不会存在问题了。
// #endregion 


// -- vertical-align 垂直对齐 --
// #region
// 1 white-space
// white-space:normal - 默认处理方式
// white-space:nowrap - 强制在同一行内显示所有文本，直到文本结束或者遭遇br标签对象才换行。

// 2 text-overflow 文字溢出
// 设置或检索是否使用一个省略标记（...）标示对象内文本的溢出
// text-overflow : clip ；不显示省略标记（...），而是简单的裁切 
// text-overflow：ellipsis ； 当对象内文本溢出时显示省略标记（...）
// #endregion 


// -- CSS精灵技术（sprite) --
// #region
// 1 精灵技术讲解
// 将网页中的一些背景图像整合到一张大图中
// 这样，当用户访问该页面时，只需向服务发送一次请求，网页中的背景图像即可全部展示出来。
// 我们需要使用CSS的:
// background-image、
// background-repeat
// background-position属性进行背景定位，
// 其中最关键的是使用background-position 属性精确地定位。
// #endregion 

// -- CSS3新增 --
// #region
// 1. CSS3属性选择器
// E[att] - 选择具有att属性的E元素
// E[att = "val"] - 选择具有att属性且属性值等于val的E元素
// E[att^ = "val"] - 匹配具有att属性,且值以val开头的E元素
// E[att$ = "val"] - 匹配具有att属性,且值以val结尾的E元素
// E[att* = "val"] - 匹配具有att属性,且值中含有val的E元素

// input[type=search] {
//     color: skyblue;
//   }

// 2. 结构伪类选择器
// E:first-child - 匹配父元素中的第一个子元素E
// E:last-child - 匹配父元素中的最后一个元素E
// E:nth-child(n) - 匹配父元素中的第n个子元素E
// E:first-of-type - 指定类型E的第一个
// E:last-of-type - 指定类型E的最后一个
// E:nth-of-type(n) - 指定类型E的第n个

// ul li:first-child {
//     background-color: lightseagreen;
// }

// nth-child(n)
// n 可以是数字、关键字、公式
// 常见的关键字有 even 偶数、odd 奇数
// 2n - 偶数
// 2n+1 - 奇数
// 5n - 5的倍数
// n+5 - 从第5个开始
// -n+5 - 前5个
// nth-child与nth-of-type区别

// 3. 伪元素选择器
// ::before - 在元素内部的前面插入内容
// ::after - 在元素内部的后面插入内容
// before 和 after 必须有 content 属性
// 创建出来的元素在 Dom 中查找不到，所以称为伪元素

// 4. 2D 转换之translate
// 移动：translate
// 旋转：rotate
// 缩放：scale
// transform: translate(x, y)
// transform: translateX(n)
// transfrom: translateY(n)  
// translate 对于行内元素是无效的

// 5. 2D 转换之rotate
//  transform: rotate(360deg)
// rotate 里面跟度数，单位是 deg
// 角度为正时，顺时针，角度为负时，逆时针
// 默认旋转的中心点是元素的中心点
// 设置元素旋转的中心的(transform-origin)
// transform-origin: x y;

// 6. 2D 转换之scale
// transform: scale(x, y)

// 7. 2D 转换综合写法以及顺序问题
// transform: translate() rotate() scale()
// 顺序会影响到转换的效果
// 当我们同时有位置或者其他属性的时候，要将位移放到最前面
// #endregion 


// -- 动画(animation) --
// #region
// 1. 动画的使用
// 先定义动画
// 再调用定义好的动画
// 定义动画
// @keyframes 动画名称 {
//     0% {
//         width: 100px;
//     }
//     100% {
//         width: 200px
//     }
// }
// 
// div {
//     /* 调用动画 */
//      animation-name: 动画名称;
//      /* 持续时间 */
//      animation-duration: 持续时间；
// }

// 2. 动画序列
// 在 @keyframs中规定某项 CSS 样式，就由创建当前样式逐渐改为新样式的动画效果

// 3. 动画常见属性
// @keyframes - 规定动画
// animation - 所有动画的简写属性
// animation-duration - 规定动画完成一个周期的时间(必须)
// animation-timing-function - 规定动画的速度曲线
// animation-delay - 规定动画何时开始
// animation-iteration-count - 规定动画被播放的次数
// animation-direction - 规定动画是否在下一周期逆向播放
// animation-play-state - 规定动画是否正在运行或暂停
// animation-fill-mode - 规定动画结束后的状态

// 4. 动画简写方式
// animation: name duration timing-function delay iteration-count direction fill-mode
// 简写属性里面不包含 animation-paly-state
// animation-paly-state: paused; 经常和鼠标经过等其他配合使用

// 5. 速度曲线细节
// linear - 动画从头到尾的速度相同
// ease - 低-快-低
// ease-in - 低速开始
// ease-out - 低速结束
// ease-in-out - 低速开始和结束
// steps() - 指定了时间函数中的间隔数量
// #endregion 


// -- CSS 过渡transition --
// #region
// 过渡transition是一个复合属性，包括transition-property、transition-duration、transition-timing-function、transition-delay这四个子属性。通过这四个子属性的配合来完成一个完整的过渡效果。
// transition-property: 过渡属性(默认值为all)
// transition-duration: 过渡持续时间(默认值为0s)
// transiton-timing-function: 过渡函数(默认值为ease函数)
// transition-delay: 过渡延迟时间(默认值为0s)
// #endregion 


// -- 3D转换 --
// #region
